# Terraform .gitignore
#
# Ignore the .terraform directory, where Terraform stores downloaded providers and modules.
.terraform/

# Ignore the .terraform.lock.hcl file, which records provider versions and checksums.
# While some teams choose to commit this file for consistent provider versions,
# ignoring it can be useful in environments where different OS or architectures
# might cause issues with the lock file.
.terraform.lock.hcl

# Ignore tfplan files, which contain the execution plan and can reveal sensitive data.
*.tfplan
*.tfplan.binary
tfplan
tfplan.*

# Ignore tfstate files and backups, which contain the state of your infrastructure
# and often sensitive data. These should be managed in a remote backend.
*.tfstate
*.tfstate.*
*.tfstate.backup

# Ignore .tfvars files, especially those containing sensitive data like passwords or API keys.
# It's recommended to use environment variables or secure secrets management for sensitive inputs.
# If you have specific .tfvars files that are safe to commit (e.g., non-sensitive defaults),
# you can explicitly un-ignore them or use a more specific ignore pattern.
*.tfvars
*.tfvars.json

# Ignore crash.log files generated by Terraform in case of errors.
crash.log
crash.*.log

# AWS credentials and sensitive files
.aws/
aws-credentials
*.pem
*.key

# Python files
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# Lambda build artifacts
lambda_build/
*.zip
lambda_package.zip

# Virtual environments
venv/
env/
ENV/
env.bak/
venv.bak/
.venv/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# Logs
*.log
logs/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Backup files
*.bak
*.backup
*.old